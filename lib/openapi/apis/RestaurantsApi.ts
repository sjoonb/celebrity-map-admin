/* tslint:disable */
/* eslint-disable */
/**
 * Celebrity Map
 * 유명인 맛지도 백오피스/앱 API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRestaurantDto,
  GetRestaurantsResponse,
  RestaurantEntity,
  UpdateRestaurantDto,
} from '../models';
import {
    CreateRestaurantDtoFromJSON,
    CreateRestaurantDtoToJSON,
    GetRestaurantsResponseFromJSON,
    GetRestaurantsResponseToJSON,
    RestaurantEntityFromJSON,
    RestaurantEntityToJSON,
    UpdateRestaurantDtoFromJSON,
    UpdateRestaurantDtoToJSON,
} from '../models';

export interface DeleteRestaurantRequest {
    id: number;
}

export interface GetRestaurantRequest {
    id: number;
}

export interface GetRestaurantsRequest {
    celebrityId?: number;
    page?: number;
    limit?: number;
    restaurantName?: string;
}

export interface PatchResetaurantRequest {
    id: number;
    updateRestaurantDto: UpdateRestaurantDto;
}

export interface PostRestaurantRequest {
    createRestaurantDto: CreateRestaurantDto;
}

/**
 * 
 */
export class RestaurantsApi extends runtime.BaseAPI {

    /**
     * 
     */
    async deleteRestaurantRaw(requestParameters: DeleteRestaurantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRestaurant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/restaurants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async deleteRestaurant(requestParameters: DeleteRestaurantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRestaurantRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async getRestaurantRaw(requestParameters: GetRestaurantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestaurantEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRestaurant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/restaurants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestaurantEntityFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getRestaurant(requestParameters: GetRestaurantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestaurantEntity> {
        const response = await this.getRestaurantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async getRestaurantsRaw(requestParameters: GetRestaurantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRestaurantsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.celebrityId !== undefined) {
            queryParameters['celebrityId'] = requestParameters.celebrityId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.restaurantName !== undefined) {
            queryParameters['restaurantName'] = requestParameters.restaurantName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/restaurants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRestaurantsResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getRestaurants(requestParameters: GetRestaurantsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRestaurantsResponse> {
        const response = await this.getRestaurantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async patchResetaurantRaw(requestParameters: PatchResetaurantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchResetaurant.');
        }

        if (requestParameters.updateRestaurantDto === null || requestParameters.updateRestaurantDto === undefined) {
            throw new runtime.RequiredError('updateRestaurantDto','Required parameter requestParameters.updateRestaurantDto was null or undefined when calling patchResetaurant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/restaurants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRestaurantDtoToJSON(requestParameters.updateRestaurantDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async patchResetaurant(requestParameters: PatchResetaurantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchResetaurantRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async postRestaurantRaw(requestParameters: PostRestaurantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createRestaurantDto === null || requestParameters.createRestaurantDto === undefined) {
            throw new runtime.RequiredError('createRestaurantDto','Required parameter requestParameters.createRestaurantDto was null or undefined when calling postRestaurant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/restaurants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRestaurantDtoToJSON(requestParameters.createRestaurantDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async postRestaurant(requestParameters: PostRestaurantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRestaurantRaw(requestParameters, initOverrides);
    }

}
